
<!--
  The closest parent is AbstractBuild's sidepanel.jelly 
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">
  <l:header />
  <l:side-panel>
    <l:tasks>
      <j:set var="buildUrl" value="${h.decompose(request)}" />
      <st:include page="tasks.jelly"/>
      <st:include page="delete.jelly" />
      <st:include page="actions.jelly" />
      <t:actions actions="${it.transientActions}"/>
      <j:if test="${it.previousBuild!=null}">
        <l:task contextMenu="false" href="${buildUrl.previousBuildUrl}" icon="icon-previous icon-md" title="${%Previous Build}"/>
      </j:if>
      <j:if test="${it.nextBuild!=null}">
        <l:task contextMenu="false" href="${buildUrl.nextBuildUrl}" icon="icon-next icon-md" title="${%Next Build}"/>
      </j:if>
      <script type="text/javascript">
      (function(){
    	  // for the simplicity I would like to change the link in javascript instead of AbstractBuild#getAllActions
    	  // 'cuz it's way too complicated to distinguish the diff situations(in jelly template or in server side java invocation)
    	  Element.select(document, '.task-link[href$="parameters"]', 
    			  '.task-icon-link[href$="parameters"]').each(function(e, i){
    				  		// e is already a prototype powered element
    		  				var href = e.href;
    		  				e.href = href.slice(0, href.lastIndexOf('/parameters')) + '/histories';
    		  				if(e.hasClassName('task-link')){
    		  					e.update('Histories');
    		  				}
    					})
      }())
      </script>
    </l:tasks>
  </l:side-panel>
</j:jelly>